#lang racket

(provide (all-defined-out))

(define l1 (list 1 2 3 4 (list 5) "h1" 9))


;; List[num] -> Number
(define (sum3 xs)
  (cond [(null? xs) 0]
        [(number? (car xs)) (+ (car xs) (sum3 (cdr xs)))]
        [(list? (car xs)) (+ (sum3 (car xs)) (sum3 (cdr xs)))]
        [#t (sum3 (cdr xs))]))


(define l2 (list 1 2 3 4 5 8 3 10))

(define (max-of-list xs)
  (cond [(null? xs) (error "ValueError: list is empty")]
        [(null? (cdr xs)) (car xs)]
        [#t (let ([tlans (max-of-list (cdr xs))])
              (if (> tlans (car xs))
                  tlans
                  (car xs)))]))